--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local Importer
do
    local _class_0
    local _base_0 = {
        __name = "Importer",
        setActiveSettings = function(self, activeSettings)
            self.activeSettings = activeSettings
            return self
        end,
        setSettings = function(self, settings)
            self.settings = settings
            return self
        end,
        setName = function(self, name)
            self.name = name
            return self
        end,
        getActiveSettings = function(self)
            return self.activeSettings
        end,
        getSettings = function(self)
            return self.settings
        end,
        getName = function(self)
            return self.name
        end,
        getId = function(self)
            return self.id
        end,
        getCache = function(self, id)
            return self.cache[id]end,
        setCache = function(self, id, val)
            self.cache[id] = val end,
        setActiveSetting = function(self, id, val)
            self.activeSettings[id] = val end,
        getActiveSetting = function(self, id)
            return self.activeSettings[id]end,
        addSetting = function(self, ...)
            local inst = XeninInventory.ImporterSetting(...)
            self.settings[inst.id] = inst
        end,
        __type = function(self)
            return "XeninInventory.Importer"end
    }
    _base_0.__index = _base_0
    _class_0 = setmetatable({
        __init = function(self)
            self.activeSettings = {}
            self.cache = {}
            self.settings = {}
        end,
        __base = _base_0
    }, {
        __index = _base_0,
        __call = function(cls, ...)
            local _self_0 = setmetatable({}, _base_0)
            cls.__init(_self_0, ...)
            return _self_0
        end
    })
    Importer = _class_0
end

XeninInventory.Importer = Importer
