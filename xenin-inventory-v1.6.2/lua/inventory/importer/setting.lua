--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

do
    local _class_0
    local _base_0 = {
        __name = "XeninInventory.ImporterSetting",
        setValue = function(self, value)
            self.value = value
            return self
        end,
        setOptions = function(self, options)
            self.options = options
            return self
        end,
        getId = function(self)
            return self.id
        end,
        getName = function(self)
            return self.name
        end,
        getValue = function(self)
            return self.value
        end,
        getUiType = function(self)
            return self.uiType
        end,
        getOptions = function(self)
            return self.options
        end,
        __type = function(self)
            return self.__name
        end
    }
    _base_0.__index = _base_0
    _class_0 = setmetatable({
        __init = function(self, id, name, value, uiType, options)
            if options == nil then options = {}
            end
            local __laux_type = (istable(id) and id.__type and id:__type()) or type(id)
            assert(__laux_type == "string", "Expected parameter `id` to be type `string` instead of `" .. __laux_type .. "`")
            local __laux_type = (istable(name) and name.__type and name:__type()) or type(name)
            assert(__laux_type == "string", "Expected parameter `name` to be type `string` instead of `" .. __laux_type .. "`")
            local __laux_type = (istable(uiType) and uiType.__type and uiType:__type()) or type(uiType)
            assert(__laux_type == "string", "Expected parameter `uiType` to be type `string` instead of `" .. __laux_type .. "`")
            local __laux_type = (istable(options) and options.__type and options:__type()) or type(options)
            assert(__laux_type == "table", "Expected parameter `options` to be type `table` instead of `" .. __laux_type .. "`")
            self.id = id
            self.name = name
            self.value = value
            self.uiType = uiType
            self.options = options
        end,
        __base = _base_0
    }, {
        __index = _base_0,
        __call = function(cls, ...)
            local _self_0 = setmetatable({}, _base_0)
            cls.__init(_self_0, ...)
            return _self_0
        end
    })
    XeninInventory.ImporterSetting = _class_0
end
