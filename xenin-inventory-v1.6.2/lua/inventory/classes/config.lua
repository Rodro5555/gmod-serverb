--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local Config
do
  local _class_0
  local _parent_0 = XeninUI.Configurator.Controller
  local _base_0 = {
    __name = "Config",
    __base = XeninUI.Configurator.Controller.__base,
    __type = function(self)
      return "XeninInventory.Config"end
  }
  _base_0.__index = _base_0
  setmetatable(_base_0, _parent_0.__index)
  _class_0 = setmetatable({
    __init = function(self)
      Config.__parent.__init(self, "inventory")

      self:setTitle({
        "Xenin Inventory",
        "The Modern Itemstore"
      })
      self:addSettingsTab("Settings", "xWYNs1Q", XeninUI.Theme.Accent, {
      hideSearch = true
      })
      self:addEntityTab("Whitelist", "xWYNs1Q", XeninUI.Theme.Green, "XeninInventory.Whitelist", {
      isList = true
      })
      self:addEntityTab("Blacklist", "xWYNs1Q", XeninUI.Theme.Red, "XeninInventory.Blacklist", {
      isList = true
      })


      self:addSetting("holster_time", "Misc", "Override Holster Time", "Description", {
        ["weapon_mp52"] = 2,
        ["weapon_ak472"] = 3
      }, "KeyValue", {
        left = {
          type = "Textentry",
          default = "ye"
        },
        right = {
          type = "Textentry",
          default = 2
        }
      })

      self:addSetting("slots_inv_free", "Basics", "Inventory Free Slots", "Description", 24, "Textentry", {
      number = true
      })
      self:addSetting("slots_inv_paid", "Basics", "Inventory Paid Slots", "Description", {
        ["superadmin"] = 42,
        ["admin"] = 36
      }, "KeyValue", {
        left = {
          type = "Selectbox",
          fetch = function()
            local tbl = {}
            for i, v in pairs(CAMI.GetUsergroups()) do
              table.insert(tbl, {
                name = v.Name,
                data = i
              })
            end

            return tbl
          end,
          default = ""
        },
        right = {
          type = "Textentry",
          default = 24,
          number = true
        }
      })
      self:addSetting("slots_bank_free", "Basics", "Bank Free Slots", "Description", 18, "Textentry", {
      number = true
      })
      self:addSetting("slots_bank_paid", "Basics", "Bank Paid Slots", "Description", {
        ["superadmin"] = 36,
        ["admin"] = 30
      }, "KeyValue", {
        left = {
          type = "Selectbox",
          fetch = function()
            local tbl = {}
            for i, v in pairs(CAMI.GetUsergroups()) do
              table.insert(tbl, {
                name = v.Name,
                data = i
              })
            end

            return tbl
          end,
          default = ""
        },
        right = {
          type = "Textentry",
          default = 30,
          number = true
        }
      })

      self:addSetting("admins", "Basics", "Admin Roles", "Description", {
      ["superadmin"] = true
      }, "KeyValue", {
        left = {
          type = "Selectbox",
          fetch = function()
            local tbl = {}
            for i, v in pairs(CAMI.GetUsergroups()) do
              table.insert(tbl, {
                name = v.Name,
                data = i
              })
            end

            return tbl
          end,
          default = ""
        },
        right = {
          type = "Textentry",
          default = "true",
          readOnly = true
        }
      })
      self:addSetting("language", "Basics", "Language", "Description", "English", "Selectbox", {
      fetch = function()
        local tbl = {}
        for i, v in SortedPairs(XeninInventory.Languages) do
          table.insert(tbl, {
            name = i,
            data = i
          })
        end

        return tbl
      end
      })

      self:addSetting("modifier_enabled", "Binds", "Require holding modifier key to pickup item", "Description", true, "Checkbox")
      self:addSetting("modifier_key", "Binds", "Key for modifier", "Description", KEY_LALT, "Key")
      self:addSetting("alt_key", "Binds", "Key used to pickup items", "Description", KEY_E, "Key")
      self:addSetting("inventory_key", "Binds", "Key to open inventory", "Description", KEY_NONE, "Key")

      self:addSetting("npc_model", "NPC", "Model", "Description", "models/humans/group02/female_01.mdl", "Textentry")
      self:addSetting("npc_color", "NPC", "Overhead Color", "Description", Color(201, 176, 15), "Color")
      self:addSetting("npc_text", "NPC", "Overhead Text", "Description", "Inventory Bank", "Textentry")
      self:addSetting("npc_icon", "NPC", "Overhead Icon", "Description", "xenin/inventory/icon.png", "Textentry")

      self:addSetting("easy_skins", "Misc", "Easy Skins", "Description", true, "Checkbox")
      self:addSetting("wipe_on_dc", "Misc", "Wipe On Disconnect", "Description", false, "Checkbox")
      self:addSetting("context_menu_disabled", "Misc", "C Menu Disabled", "Description", false, "Checkbox")
      self:addSetting("context_menu_size", "Misc", "C Menu Size", "Description", "Large", "Selectbox", {
      fetch = function()
        return {
          {
            name = "Large",
            data = "Large"
          },
          {
            name = "Medium",
            data = "Medium"
          }
        }
      end
      })


      self:addSetting("ui_slot_color", "UI", "Slot Color", "Description", XeninUI.Theme.Navbar, "Color")
      self:addSetting("ui_slot_name_color", "UI", "Slot Name Color", "Description", XeninUI.Theme.Primary, "Color")
      self:addSetting("ui_slot_text_color", "UI", "Slot Text Color", "Description", Color(225, 225, 225), "Color")
    end,
    __base = _base_0,
    __parent = _parent_0
  }, {
    __index = function(cls, parent)
      local val = rawget(_base_0, parent)
      if val == nil then local _parent = rawget(cls, "__parent")
        if _parent then return _parent[parent]
        end
      else
        return val
      end
    end,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  if _parent_0.__inherited then _parent_0.__inherited(_parent_0, _class_0)
  end
  Config = _class_0
end

XeninInventory.Config2 = Config()
