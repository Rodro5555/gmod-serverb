--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local PANEL = {}

function PANEL:Init()
  self.Sidebar = self:Add("XeninUI.SidebarV2")
  self.Sidebar:Dock(LEFT)
  self.Sidebar:SetBody(self)
  self.Sidebar:CreatePanel("ItemStore", nil, "XeninInventory.Admin.Importer.Panel")
  self.Sidebar:SetActive(1)
  self.Sidebar.Paint = function(pnl, w, h)
    XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, XeninUI.Theme.Navbar, false, false, true, false, false)
  end
end

function PANEL:PerformLayout(w, h)
  self.Sidebar:SetWide(110)
end

vgui.Register("XeninInventory.Admin.Importer", PANEL)

local PANEL = {}

XeninUI:CreateFont("XeninInventory.Admin.Importer.Loading", 18)
XeninUI:CreateFont("XeninInventory.Admin.Importer.Submit", 21)

net.Receive("XeninInventory.Admin.Importer.Request", function(len)
  local importerId = net.ReadString()
  local id = net.ReadString()
  local amount = net.ReadUInt(24)

  hook.Run("XeninInventory.Admin.Importer.Request", importerId, id, amount)
end)

net.Receive("XeninInventory.Admin.Importer.Import", function(len)
  local importerId = net.ReadString()
  local step = net.ReadUInt(3)
  local amount = net.ReadUInt(24)

  hook.Run("XeninInventory.Admin.Importer.Import", importerId, step, amount)
end)

function PANEL:Init()
  self.ImporterId = "ItemStore"

  self:RequestInformation()
end

function PANEL:SetLoading(text)
  self.Loading = true
  self.LoadingText = text
end

function PANEL:RequestInformation()
  self:SetLoading("Getting initial data")

  net.Start("XeninInventory.Admin.Importer.Request")
  net.WriteString("ItemStore")
  net.SendToServer()

  hook.Add("XeninInventory.Admin.Importer.Request", self, function(self, importerId, id, amount)
    if (self.ImporterId != importerId) then return end

    self.Data = {
      id = id,
      amount = amount
    }
    self.Loading = false

    if (self.Data.id == "not_installed") then
      self.NotInstalled = true

      return
    end

    self:CreateInformation()
  end)
end

PANEL.Methods = {
  text = "Text Files",
  sqlite = "Local SQL (SQLite)",
  mysql = "External SQL (MySQL)"
}

XeninUI:CreateFont("XeninInventory.Admin.Importer.Title", 32)
XeninUI:CreateFont("XeninInventory.Admin.Importer.Failed", 52)
XeninUI:CreateFont("XeninInventory.Admin.Importer.Importing", 30)
XeninUI:CreateFont("XeninInventory.Admin.Importer.Percentage", 18)
XeninUI:CreateFont("XeninInventory.Admin.Importer.Step", 14)
XeninUI:CreateFont("XeninInventory.Admin.Importer.Setting", 18)

function PANEL:CreateInformation()
  local method = self.Methods[self.Data.id]
  local players = self.Data.amount
  self.Markup = markup.Parse("<font=XeninInventory.Admin.Importer.Loading><color=174,174,174>Data type: <color=255,255,255>" .. tostring(method) .. "</color>\nPlayers: <color=255,255,255>" .. tostring(players) .. "</color></color></font>")

  self.Body = self:Add("Panel")
  self.Body:Dock(FILL)
  self.Body:DockPadding(16, 16, 16, 16)

  self.Title = self.Body:Add("DLabel")
  self.Title:Dock(TOP)
  self.Title:DockMargin(0, 52, 0, 8)
  self.Title:SetFont("XeninInventory.Admin.Importer.Title")
  self.Title:SetText("Settings")
  self.Title:SizeToContents()

  self.Settings = {}

  local importer = XeninInventory.Importers:getImporter(self.ImporterId)
  local firstSetting
  for i, v in pairs(importer:getSettings()) do
    local id = v:getId()
    local name = v:getName()
    local val = v:getValue()
    local uiType = v:getUiType()
    local options = v:getOptions()

    local row = self.Body:Add("DPanel")
    row:Dock(TOP)
    row:DockMargin(0, 0, 0, 0)
    row:SetTall(48)
    row.Id = id
    row.First = !firstSetting
    row.Markup = markup.Parse("<font=XeninInventory.Admin.Importer.Setting><color=185, 185, 185>" .. tostring(name) .. "</color></font>")
    row.Paint = function(pnl, w, h)
      surface.SetDrawColor(100, 100, 100)
      if pnl.First then
        surface.DrawRect(0, 0, w, 1)
      end

      surface.DrawRect(0, h - 1, w, 1)

      pnl.Markup:Draw(0, h / 2 - 1, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end

    local input = row:Add("XeninUI.CheckboxV2")
    input.Background = XeninUI.Theme.Background
    input:Dock(RIGHT)
    local l, t, r, b = input:GetDockMargin()
    input:DockMargin(8, 8, 0, 8)
    input:SetState(val, true)
    input:SetWide(32)
    row.Input = input

    table.insert(self.Settings, row)
    firstSetting = true
  end

  self.Submit = self.Body:Add("XeninUI.ButtonV2")
  self.Submit:SetText("Start Import")
  self.Submit:SetFont("XeninInventory.Admin.Importer.Submit")
  self.Submit:SetRoundness(6)
  self.Submit:SetSolidColor(XeninUI.Theme.Accent)
  self.Submit.DoClick = function(pnl)
    XeninUI:SimpleQuery("Import ItemStore", "Importing will wipe your inventory data first", "Yes, wipe & import!", function()
      self.Body:Remove()

      self.Importing = 0
      self.Step = 1
      self.Status = self.Steps[self.Step]

      local results = {}
      for i, v in pairs(self.Settings) do
        results[v.Id] = v.Input.State
      end

      net.Start("XeninInventory.Admin.Importer.Import")
      net.WriteString(self.ImporterId)
      net.WriteString(self.Data.id)
      net.WriteTable(results)
      net.SendToServer()

      hook.Add("XeninInventory.Admin.Importer.Import", self, function(self, importerId, step, amount)
        self.Step = step
        self.Status = self.Steps[step]
        self.Importing = amount
      end)
    end, "Nevermind", function() end)
  end
end

PANEL.Steps = {
  [1] = "Processing rows",
  [2] = "Importing inventory",
  [3] = "Importing bank",
  [4] = "Finished importing"
}

function PANEL:Paint(w, h)
  if self.NotInstalled then
    return draw.SimpleText("Unable to find any ItemStore data.", "XeninInventory.Admin.Importer.Failed", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
  end


  if self.Importing then
    local frac = (self.Importing / (self.Data.amount * 2)) / 3
    draw.SimpleText(self.Status, "XeninInventory.Admin.Importer.Importing", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)

    local size = w / 2
    XeninUI:DrawRoundedBox(6, size / 2, h / 2 + 10, size, 20, XeninUI.Theme.Navbar)

    local aX, aY = self:LocalToScreen()
    render.SetScissorRect(aX + size / 2, aY + h / 2 + 10, aX + size / 2 + (size * frac), aY + h / 2 + 10 + 20, true)
    XeninUI:DrawRoundedBox(6, size / 2 + 2, h / 2 + 10 + 2, size - 4, 16, XeninUI.Theme.Green)
    render.SetScissorRect(0, 0, ScrW(), ScrH(), false)

    local percentage = math.Round(frac * 100, 1)
    XeninUI:DrawShadowText(tostring(percentage) .. "%", "XeninInventory.Admin.Importer.Percentage", w / 2, h / 2 + 18 / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 1, 150)
    local str = ""
    if (self.Step != 4) then
      str = "Step " .. math.min(self.Step, 3) .. "/3"
    end
    XeninUI:DrawShadowText(str, "XeninInventory.Admin.Importer.Step", w / 2, h / 2 + 20 + 18, Color(172, 172, 172), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 1, 150)

    if (percentage < 100) then
      local size = 96
      XeninUI:DrawLoadingCircle(h / 2 + size / 2 + size / 5, h / 2 - size - 8, size, XeninUI.Theme.Accent)
    end

    return
  end

  if self.Loading then
    local size = 96
    XeninUI:DrawLoadingCircle(h / 2 + size / 2 + size / 5, h / 2 - size, size, XeninUI.Theme.Accent)

    draw.SimpleText(self.LoadingText, "XeninInventory.Admin.Importer.Loading", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
  end

  if self.Markup then
    self.Markup:Draw(16, 16, 16)
  end
end

function PANEL:PerformLayout(w, h)
  if (!IsValid(self.Submit)) then return end

  self.Submit:SizeToContentsY(10)
  self.Submit:SizeToContentsX(28)
  self.Submit:AlignRight(16)
  self.Submit:AlignBottom(16)
end

vgui.Register("XeninInventory.Admin.Importer.Panel", PANEL)
