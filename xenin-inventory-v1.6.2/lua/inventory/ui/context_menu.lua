--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local PANEL = {}

function PANEL:Init()
  self.Background = Color(0, 0, 0, 200)
end

function PANEL:DragHover()
  if self.lock then return end

  self.lock = true
  self:LerpColor("Background", Color(0, 0, 0, 240))
end

function PANEL:DragHoverExited()
  self.lock = nil

  self:LerpColor("Background", Color(0, 0, 0, 200))
end

vgui.Register("XeninInventory.ActionField", PANEL)

XeninUI:CreateFont("XeninInventory.ContextMenu.Action", 40)
XeninUI:CreateFont("XeninInventory.ContextMenu.Action.Small", 29)

local cache = {}
function XeninInventory:VerticalText(text, font, col, x, y)
  local sizes

  if cache[text] then
    sizes = cache[text]
  else
    sizes = {}

    local tbl = {
    utf8.codepoint(text, 1, -1) }

    for i, v in ipairs(tbl) do
      if (v <= (2 ^ 7) - 1) then
        size = 1
      elseif (v <= (2 ^ 11) - 1) then
        size = 2
      elseif (v <= (2 ^ 16) - 1) then
        size = 3
      else
        size = 4
      end

      table.insert(sizes, size)
    end

    cache[text] = sizes
  end

  surface.SetFont(font)
  surface.SetTextColor(col)
  local h = draw.GetFontHeight(font)
  local pY = -((h - 8) * #sizes) / 2
  local pos = 1

  for i = 1, #sizes do
    local size = sizes[i]
    local str = string.sub(text, pos, (pos - 1) + size)
    local w, h = surface.GetTextSize(str)
    surface.SetTextPos(x - w / 2, y + pY + (i - 1) * (h - 8))
    surface.DrawText(str)

    pos = pos + size
  end
end

local PANEL = {}

function PANEL:Init()
  XeninInventory.ContextFrame = self

  self.Left = self:Add("XeninInventory.ActionField")
  self.Left.Paint = function(pnl, w, h)
    if (!dragndrop.IsDragging()) then return end
    local drag = dragndrop.m_Dragging[1]
    if (drag and drag.isInventoryField) then
      local item = XeninInventory:GetItem(drag.dropEnt)
      if item.Actions["Drop"] then
        draw.RoundedBoxEx(6, 0, 0, w, h, pnl.Background, true, false, false, false)

        local fontHeight = draw.GetFontHeight("XeninInventory.ContextMenu.Action")
        local str = XeninInventory:GetPhrase("XeninInventory.Actions.Drop")

        XeninInventory:VerticalText(str, "XeninInventory.ContextMenu.Action", color_white, w / 2, h / 2)
      elseif item.Actions["Drop Amount"] then
        draw.RoundedBoxEx(6, 0, 0, w, h, pnl.Background, true, false, false, false)

        local fontHeight = draw.GetFontHeight("XeninInventory.ContextMenu.Action")
        local str = XeninInventory:GetPhrase("XeninInventory.Actions.Drop Amount")

        XeninInventory:VerticalText(str, "XeninInventory.ContextMenu.Action", color_white, w / 2, h / 2)
      end
    end
  end
  self.Left:Receiver("XeninInventory.Field", function(pnl, tbl, dropped)
    if (!dropped) then return end
    local droppedPnl = tbl[1]
    if (!droppedPnl) then return end
    local item = droppedPnl.dropEnt
    if (!item) then return end
    item = XeninInventory:GetItem(item)
    if (!item) then return end

    if item.Actions["Drop"] then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Drop")](droppedPnl, droppedPnl:GetID())
    elseif item.Actions["Drop Amount"] then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Drop Amount")](droppedPnl, droppedPnl:GetID())
    end
  end)

  self.Top = self:Add("XeninInventory.ActionField")
  self.Top.Paint = function(pnl, w, h)
    if (!dragndrop.IsDragging()) then return end
    local drag = dragndrop.m_Dragging[1]
    if (drag and drag.isInventoryField) then
      local item = XeninInventory:GetItem(drag.dropEnt)
      if (item.Actions["Equip"] or item.Actions["Use"]) then
        surface.SetDrawColor(pnl.Background)
        surface.DrawRect(0, 0, w, h)

        local str = item.Actions["Equip"] and XeninInventory:GetPhrase("XeninInventory.Actions.Equip") or XeninInventory:GetPhrase("XeninInventory.Actions.Use")
        draw.SimpleText(str, "XeninInventory.ContextMenu.Action", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
      end
    end
  end
  self.Top:Receiver("XeninInventory.Field", function(pnl, tbl, dropped)
    if (!dropped) then return end
    local droppedPnl = tbl[1]
    if (!droppedPnl) then return end
    local item = droppedPnl.dropEnt
    if (!item) then return end
    item = XeninInventory:GetItem(item)
    if (!item) then return end

    if item.Actions["Equip"] then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Equip")](droppedPnl, droppedPnl:GetID())
    elseif item.Actions["Use"] then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Use")](droppedPnl, droppedPnl:GetID())
    end
  end)

  self.Right = self:Add("XeninInventory.ActionField")
  self.Right.Paint = function(pnl, w, h)
    if (!dragndrop.IsDragging()) then return end
    local drag = dragndrop.m_Dragging[1]
    if (drag and drag.isInventoryField) then
      local item = XeninInventory:GetItem(drag.dropEnt)

      local amt = drag.info.data.amount or drag.info.data.Amount or 0
      if (item.Actions["Drop All"] and (drag:GetAmount() > 1 or amt > 1)) then
        draw.RoundedBoxEx(6, 0, 0, w, h, pnl.Background, false, true, false, false)

        local fontHeight = draw.GetFontHeight("XeninInventory.ContextMenu.Action")
        local str = XeninInventory:GetPhrase("XeninInventory.Actions.Drop All")
        fontHeight = 40

        XeninInventory:VerticalText(str, "XeninInventory.ContextMenu.Action", color_white, w / 2, h / 2)
      end
    end
  end
  self.Right:Receiver("XeninInventory.Field", function(pnl, tbl, dropped)
    if (!dropped) then return end
    local droppedPnl = tbl[1]
    if (!droppedPnl) then return end
    local item = droppedPnl.dropEnt
    if (!item) then return end
    item = XeninInventory:GetItem(item)
    if (!item) then return end

    if (item.Actions["Drop All"] and (droppedPnl:GetAmount() > 1 or droppedPnl.info.data.amount > 1 or droppedPnl.info.data.Amount > 1)) then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Drop All")](droppedPnl, droppedPnl:GetID())
    end
  end)

  self.XeninInventory = self:Add("XeninUI.Frame")
  self.XeninInventory.closeBtn:SetVisible(false)
  self.XeninInventory:SetTitle(XeninInventory:GetPhrase("XeninInventory.Title"))
  self.XeninInventory.Paint = function(pnl, w, h)
    draw.RoundedBox(6, 0, 0, w, h, XeninUI.Theme.Background)
  end

  self.XeninInventory.Panel = self.XeninInventory:Add("XeninInventory.Slots")
  self.XeninInventory.Panel:SetColumns(XeninInventory.Config.ContextMenuColumns or 6)
  self.XeninInventory.Panel:Dock(FILL)
  self.XeninInventory.Panel:DockMargin(8, 8, 8, 8)
  self.XeninInventory.Panel:CreateFields(LocalPlayer():XeninInventory():GetInventory(), true)
end

function PANEL:PerformLayout(w, h)
  self.Left:SetPos(0, 0)
  self.Left:SetSize(150, h)

  self.Top:SetPos(150, 0)
  self.Top:SetSize(w - 300, 150)

  self.Right:SetPos(w - 150, 0)
  self.Right:SetSize(150, h)

  self.XeninInventory:SetPos(150, 150)
  self.XeninInventory:SetSize(w - 300, h - 150)
end

vgui.Register("XeninInventory.Context", PANEL)

hook.Add("OnContextMenuOpen", "XeninInventory", function()
  timer.Simple(0, function()
    if (!IsValid(XeninInventory.ContextFrame) and !XeninInventory.Config.ContextMenuDisabled) then
      if (!XeninInventory:CanUseInventory(LocalPlayer())) then
        LocalPlayer():XeninInventory():Message(XeninInventory:GetPhrase("ChatCommand.AccessRestricted"))

        return
      end

      local frame = g_ContextMenu:Add("XeninInventory.Context")
      local tbl = XeninInventory.Config.ContextMenuSize or {}
      tbl.Width = tbl.Width or 1000
      tbl.Height = tbl.Height or 534
      local width = math.min(ScrW() - 200, tbl.Width)
      local height = math.min(ScrH(), tbl.Height)

      frame:SetSize(width, height)
      frame:SetPos(ScrW() / 2 - width / 2, ScrH() - height - 10)
      frame:SetMouseInputEnabled(true)
    end
  end)
end)

hook.Add("OnContextMenuClose", "XeninInventory", function()
  if IsValid(XeninInventory.ContextFrame) then
    XeninInventory.ContextFrame:Remove()
  end
end)

local LastHoverThink = nil
local LastHoverChangeTime = 0
local LastX = 0
local LastY = 0

function dragndrop.HoverThink()
  local hovered = vgui.GetHoveredPanel()
  local x = gui.MouseX()
  local y = gui.MouseY()

  if (LastHoverThink != hovered and IsValid(LastHoverThink) and LastHoverThink.DragHoverExited) then
    local dragging = LastHoverThink:IsDragging()

    if (!dragging) then
      LastHoverThink:DragHoverExited()
    end
  end

  if (LastHoverThink != hovered || x != LastX || y != LastY) then
    LastHoverChangeTime = SysTime()
    LastHoverThink = hovered
  end



  if IsValid(LastHoverThink) then
    LastX = x
    LastY = y

    local dragging = LastHoverThink:IsDragging()

    if (!dragging) then
      LastHoverThink:DragHover(SysTime() - LastHoverChangeTime)
    end
  end
end
