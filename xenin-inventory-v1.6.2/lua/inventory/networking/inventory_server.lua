--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

util.AddNetworkString("XeninInventory.Swap")
util.AddNetworkString("XeninInventory.Slot")
util.AddNetworkString("XeninInventory.FullSync")
util.AddNetworkString("XeninInventory.Message")
util.AddNetworkString("XeninInventory.RequestSync")


util.AddNetworkString("XeninInventory.Equip")
util.AddNetworkString("XeninInventory.Drop")
util.AddNetworkString("XeninInventory.DropAll")
util.AddNetworkString("XeninInventory.Destroy")
util.AddNetworkString("XeninInventory.Use")
util.AddNetworkString("XeninInventory.UseTwice")
util.AddNetworkString("XeninInventory.RepairEquipped")
util.AddNetworkString("XeninInventory.DropAmount")
util.AddNetworkString("XeninInventory.DropAmount.Data")


util.AddNetworkString("XeninInventory.Swap.InventoryToBank")
util.AddNetworkString("XeninInventory.Swap.Bank")
util.AddNetworkString("XeninInventory.Bank.Slot")


util.AddNetworkString("XeninInventory.Admin.RemoveItem")
util.AddNetworkString("XeninInventory.Admin.Clear")
util.AddNetworkString("XeninInventory.Admin.Search")
util.AddNetworkString("XeninInventory.Admin.Importer.Request")
util.AddNetworkString("XeninInventory.Admin.Importer.Import")

net.Receive("XeninInventory.Admin.Importer.Import", function(len, ply)
  if (!XeninInventory:IsAdmin(ply)) then return end
  local importerId = net.ReadString()
  local importer = XeninInventory.Importers:getImporter(importerId)
  local method = net.ReadString()
  XeninInventory.Importer.CurrentlyImporting = importerId
  XeninInventory.Importer.PlayerImporting = ply
  local amount = importer:getCache("provider_info").amount
  local settings = net.ReadTable()

  importer:readData(method, settings, true):next(function()
    net.Start("XeninInventory.Admin.Importer.Import")
    net.WriteString(importerId)
    net.WriteUInt(2, 3)
    net.WriteUInt(amount * 2, 24)
    net.Send(ply)

    return importer:importToInventory()
  end):next(function()
    net.Start("XeninInventory.Admin.Importer.Import")
    net.WriteString(importerId)
    net.WriteUInt(3, 3)
    net.WriteUInt(amount * 4, 24)
    net.Send(ply)

    return importer:importToBank()
  end):next(function()
    net.Start("XeninInventory.Admin.Importer.Import")
    net.WriteString(importerId)
    net.WriteUInt(4, 3)
    net.WriteUInt(amount * 6, 24)
    net.Send(ply)
  end)
end)

hook.Add("XeninInventory.Importer.Sleeping", "XeninInventory.Importer", function(i)
  if (!IsValid(XeninInventory.Importer.PlayerImporting)) then return end

  net.Start("XeninInventory.Admin.Importer.Import")
  net.WriteString(XeninInventory.Importer.CurrentlyImporting)
  net.WriteUInt(1, 3)
  net.WriteUInt(i, 24)
  net.Send(XeninInventory.Importer.PlayerImporting)
end)

net.Receive("XeninInventory.Admin.Importer.Request", function(len, ply)
  if (!XeninInventory:IsAdmin(ply)) then return end
  local importerId = net.ReadString()
  local importer = XeninInventory.Importers:getImporter(importerId)
  importer:getInfo():next(function(result)
    net.Start("XeninInventory.Admin.importer.Request")
    net.WriteString(importerId)
    net.WriteString(result.type)
    net.WriteUInt(result.amount or 0, 24)
    net.Send(ply)
  end)
end)

net.Receive("XeninInventory.Admin.RemoveItem", function(len, ply)
  local isAdmin = XeninInventory:IsAdmin(ply)
  if (!isAdmin) then return end
  local sid64 = net.ReadString()
  local id = net.ReadUInt(16)
  local bank = net.ReadBool()
  local target = player.GetBySteamID64(sid64)

  if IsValid(target) then
    local inv = target:XeninInventory()
    inv:Set(id, nil, bank)
    inv:DeleteSlot(id, bank)
    inv:NetworkSlot(id, bank)
    inv:Message(XeninInventory:GetPhrase("Admin.Clear.Slot", {
      id = id,
      type = bank and "bank" or "inventory"
    }))
  else
    XeninInventory.Database["Delete" .. (bank and "Bank" or "") .. "Slot"](XeninInventory.Database, sid64, id)
  end
end)

net.Receive("XeninInventory.Admin.Clear", function(len, ply)
  local isAdmin = XeninInventory:IsAdmin(ply)
  if (!isAdmin) then return end
  local sid64 = net.ReadString()
  local bank = net.ReadBool()
  local target = player.GetBySteamID64(sid64)

  if IsValid(target) then
    local inv = target:XeninInventory()
    local tbl = bank and inv:GetBank() or inv:GetInventory()
    for i, v in pairs(tbl) do
      inv:Set(v.id, nil, bank)
      inv:DeleteSlot(v.id, bank)
      inv:NetworkSlot(v.id, bank)
    end

    inv:Message(XeninInventory:GetPhrase("Admin.Clear", {
    type = bank and "bank" or "inventory" }))
  else
    XeninInventory.Database:Clear(sid64, bank)
  end
end)

net.Receive("XeninInventory.Admin.Search", function(len, ply)
  local isAdmin = XeninInventory:IsAdmin(ply)
  if (!isAdmin) then return end
  local isOnline = net.ReadBool()
  local data = net.ReadTable()

  if isOnline then
    local tbl = {}

    for i, v in pairs(data) do
      if (!IsValid(v)) then continue end

      local inv = v:XeninInventory()
      tbl[v:SteamID64()] = {
        inv = inv:GetInventory(),
        bank = inv:GetBank()
      }
    end

    net.Start("XeninInventory.Admin.Search")
    net.WriteTable(tbl)
    net.Send(ply)
  else
    local sid64 = data[1]
    sid64 = sid64:Trim()
    if sid64:find("STEAM_0") then
      local convert = util.SteamIDTo64(sid64)

      if (convert and convert != "") then
        sid64 = convert
      end
    end

    XeninInventory.Database:GetInventory(sid64, function(inventory)
      XeninInventory.Database:GetBank(sid64, function(bank)
        inventory = inventory or {}
        bank = bank or {}

        local invTemp = {}
        for i, v in pairs(inventory) do
          invTemp[tonumber(v.slot)] = XeninInventory.GetInventoryStructure(v)
        end
        local bankTemp = {}
        for i, v in pairs(bank) do
          bankTemp[tonumber(v.slot)] = XeninInventory.GetInventoryStructure(v)
        end

        local tbl = {}

        if (table.Count(invTemp) > 0 or table.Count(bankTemp) > 0) then
          tbl[sid64] = {
            inv = invTemp,
            bank = bankTemp
          }
        end

        net.Start("XeninInventory.Admin.Search")
        net.WriteTable(tbl)
        net.Send(ply)
      end)
    end)
  end
end)

net.Receive("XeninInventory.Swap.InventoryToBank", function(len, ply)
  local inv = net.ReadUInt(10)
  local bank = net.ReadUInt(10)
  local invClass = ply:XeninInventory()
  if (!inv or !bank) then return end

  invClass:SwapBank(inv, bank)
end)

net.Receive("XeninInventory.Swap.Bank", function(len, ply)
  local from = net.ReadUInt(10)
  local to = net.ReadUInt(10)
  local inv = ply:XeninInventory()
  if (!from or !to) then return end

  inv:Swap(from, to, true)
end)

net.Receive("XeninInventory.Swap", function(len, ply)
  local from = net.ReadUInt(10)
  local to = net.ReadUInt(10)
  local inv = ply:XeninInventory()
  if (!from or !to) then return end

  inv:Swap(from, to)
end)

net.Receive("XeninInventory.Equip", function(len, ply)
  if (!XeninInventory:CanUseInventory(ply)) then return end
  local id = net.ReadUInt(10)
  local inv = ply:XeninInventory()
  local slot = inv:Get(id)
  if (!slot) then return end
  local item = XeninInventory:GetItem(slot.dropEnt)
  if (!item) then return end
  if (!item.Actions.Equip) then return end
  local canEquip = item.Actions.Equip.Pre(item, ply, slot)
  if (!canEquip) then return end

  if inv:ReduceAmount(id, 1, true, item.UseDataAmount) then
    item.Actions.Equip.Action(item, ply, slot.ent, slot)
  end
end)

net.Receive("XeninInventory.Use", function(len, ply)
  if (!XeninInventory:CanUseInventory(ply)) then return end
  local id = net.ReadUInt(10)
  local inv = ply:XeninInventory()
  local slot = inv:Get(id)
  if (!slot) then return end
  local item = XeninInventory:GetItem(slot.dropEnt)
  if (!item) then return end
  if (!item.Actions.Use) then return end
  local canEquip = item.Actions.Use.Pre(item, ply, slot)
  if (!canEquip) then return end

  if inv:ReduceAmount(id, 1, true) then
    item.Actions.Use.Action(item, ply, slot.ent, slot)
  end
end)

net.Receive("XeninInventory.Drop", function(len, ply)
  if (!XeninInventory:CanUseInventory(ply)) then return end
  local id = net.ReadUInt(10)
  local inv = ply:XeninInventory()
  local slot = inv:Get(id)
  if (!slot) then return end
  local item = XeninInventory:GetItem(slot.dropEnt)
  if (!item) then return end
  if (!item.Actions.Drop) then return end

  if inv:ReduceAmount(id, 1, true) then
    item.Actions.Drop.Action(item, ply, slot.ent, slot)
  end
end)

net.Receive("XeninInventory.DropAll", function(len, ply)
  if (!XeninInventory:CanUseInventory(ply)) then return end
  local id = net.ReadUInt(10)
  local inv = ply:XeninInventory()
  local slot = inv:Get(id)
  if (!slot) then return end
  local item = XeninInventory:GetItem(slot.dropEnt)
  if (!item) then return end
  if (!item.Actions["Drop All"]) then return end

  if inv:ReduceAmount(id, slot.amount, true) then
    item.Actions["Drop All"].Action(item, ply, slot.ent, slot)
  end
end)

net.Receive("XeninInventory.DropAmount", function(len, ply)
  if (!XeninInventory:CanUseInventory(ply)) then return end
  local id = net.ReadUInt(10)
  local amt = net.ReadUInt(32)
  local inv = ply:XeninInventory()
  local slot = inv:Get(id)
  if (!slot) then return end
  local item = XeninInventory:GetItem(slot.dropEnt)
  if (!item) then return end
  if (!item.Actions["Drop Amount"]) then return end

  if inv:ReduceAmount(id, amt, true) then
    item.Actions["Drop Amount"].Action(item, ply, slot.ent, slot, amt)
  end
end)

net.Receive("XeninInventory.DropAmount.Data", function(len, ply)
  if (!XeninInventory:CanUseInventory(ply)) then return end
  local id = net.ReadUInt(10)
  local amt = net.ReadUInt(32)
  local inv = ply:XeninInventory()
  local slot = inv:Get(id)
  if (!slot) then return end
  local item = XeninInventory:GetItem(slot.dropEnt)
  if (!item) then return end
  if (!item.Actions["Drop Amount"]) then return end

  local amount = slot.data.amount or slot.data.Amount or slot.amount
  if (amount > slot.amount) then
    local newAmount = (slot.data.amount or slot.data.Amount) - amt
    if (newAmount < 0) then return end

    slot.data.amount = slot.data.amount and newAmount
    slot.data.Amount = slot.data.Amount and newAmount

    if (newAmount == 0) then
      inv:Set(id, nil)
      inv:DeleteSlot(id)
    end

    item.Actions["Drop Amount"].Action(item, ply, slot.ent, slot, amt)

    if (newAmount > 0) then
      inv:SaveSlot(id)
    end
  end
end)

net.Receive("XeninInventory.Destroy", function(len, ply)
  if (!XeninInventory:CanUseInventory(ply)) then return end
  local id = net.ReadUInt(10)
  local inv = ply:XeninInventory()
  local slot = inv:Get(id)
  if (!slot) then return end

  inv:Set(id, nil)
  inv:DeleteSlot(id)
end)

net.Receive("XeninInventory.RequestSync", function(len, ply)
  local lastTime = ply.__XeninInventoryLastRequest or 0
  if (lastTime > CurTime()) then return end
  ply.__XeninInventoryLastRequest = CurTime() + 120

  net.Start("XeninInventory.RequestSync")
  net.WriteTable(ply:XeninInventory():GetInventory())
  net.Send(ply)
end)
